#!/bin/bash

# Frontzap Stack Deployment Script
# Para uso com Traefik e Portainer j√° instalados

set -e

echo "üöÄ Iniciando deploy do Frontzap Stack..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

# Verificar se Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    error "Docker n√£o est√° rodando!"
    exit 1
fi

# Verificar se a rede traefik existe
if ! docker network ls | grep -q "traefik"; then
    warn "Rede 'traefik' n√£o encontrada. Criando..."
    docker network create traefik
fi

# Verificar se arquivo .env existe
if [ ! -f ".env.stack" ]; then
    error "Arquivo .env.stack n√£o encontrado!"
    echo "Copie o arquivo .env.stack e configure suas vari√°veis:"
    echo "cp .env.stack .env"
    echo "nano .env"
    exit 1
fi

# Carregar vari√°veis de ambiente
log "Carregando vari√°veis de ambiente..."
export $(cat .env.stack | grep -v '^#' | xargs)

# Verificar vari√°veis obrigat√≥rias
required_vars=("DOMAIN" "POSTGRES_PASSWORD" "REDIS_PASSWORD" "NEXTAUTH_SECRET")
for var in "${required_vars[@]}"; do
    if [ -z "${!var}" ]; then
        error "Vari√°vel $var n√£o est√° definida no .env.stack"
        exit 1
    fi
done

# Criar diret√≥rios necess√°rios
log "Criando diret√≥rios necess√°rios..."
mkdir -p logs
mkdir -p backups

# Build da aplica√ß√£o
log "Fazendo build da aplica√ß√£o Frontzap..."
docker build -t frontzap:latest .

# Deploy da stack
log "Fazendo deploy da stack..."
docker-compose -f docker-compose.stack.yml up -d

# Aguardar servi√ßos ficarem prontos
log "Aguardando servi√ßos ficarem prontos..."
sleep 30

# Verificar status dos servi√ßos
log "Verificando status dos servi√ßos..."
docker-compose -f docker-compose.stack.yml ps

# Executar migra√ß√µes do banco
log "Executando migra√ß√µes do banco de dados..."
docker-compose -f docker-compose.stack.yml exec -T postgres psql -U ${POSTGRES_USER:-frontzap} -d ${POSTGRES_DB:-frontzap} -f /docker-entrypoint-initdb.d/init-db.sql || warn "Migra√ß√µes j√° executadas ou erro na execu√ß√£o"

# Verificar sa√∫de dos servi√ßos
log "Verificando sa√∫de dos servi√ßos..."
services=("frontzap-postgres" "frontzap-redis" "frontzap-app" "frontzap-n8n")
for service in "${services[@]}"; do
    if docker ps --filter "name=$service" --filter "status=running" | grep -q "$service"; then
        log "‚úÖ $service est√° rodando"
    else
        error "‚ùå $service n√£o est√° rodando"
    fi
done

# Mostrar URLs de acesso
log "üéâ Deploy conclu√≠do com sucesso!"
echo ""
echo -e "${BLUE}üì± Frontzap App: ${GREEN}https://${DOMAIN}${NC}"
echo -e "${BLUE}ü§ñ N8N Automations: ${GREEN}https://n8n.${DOMAIN}${NC}"
echo ""
echo -e "${YELLOW}üìã Para monitorar os logs:${NC}"
echo "docker-compose -f docker-compose.stack.yml logs -f"
echo ""
echo -e "${YELLOW}üìã Para parar a stack:${NC}"
echo "docker-compose -f docker-compose.stack.yml down"
echo ""
echo -e "${YELLOW}üìã Para fazer backup:${NC}"
echo "./backup-stack.sh"
